import sqlite3
from datetime import time, timedelta, datetime
import usb.core
import usb.util
from datetime import datetime, time
import json
import os
import getpass
import subprocess
from datetime import time as dt_time

from escpos.printer import Usb
from openpyxl import Workbook

MOUNT_DIR = "/mnt/usb_cle"

def get_usb_printer():
    # Recherche tous les p√©riph√©riques USB
    devices = usb.core.find(find_all=True)
    for dev in devices:
        try:
            # Sauter les root hubs (ID 1d6b:xxxx)
            if dev.idVendor == 0x1d6b:
                continue

            # Sauter si pas de configuration
            if dev.bNumConfigurations < 1:
                continue

            # V√©rifier si le p√©riph√©rique est une imprimante
            cfg = dev.get_active_configuration()
            intf = cfg[(0, 0)]
            if intf.bInterfaceClass != 7:  # 7 = classe imprimante
                continue

            # Lib√©rer l'interface si utilis√©e par le noyau
            if dev.is_kernel_driver_active(0):
                dev.detach_kernel_driver(0)

            # Configurer le p√©riph√©rique
            dev.set_configuration()

            # Retourner l'objet imprimante
            print(f"‚úÖ Imprimante d√©tect√©e : {hex(dev.idVendor)}:{hex(dev.idProduct)}")
            return Usb(dev.idVendor, dev.idProduct, 0)

        except usb.core.USBError as e:
            print(f"Erreur USB : {e}")
        except Exception as e:
            print(f"Erreur avec {hex(dev.idVendor)}:{hex(dev.idProduct)} ‚Üí {e}")

    print("‚ùå Aucune imprimante d√©tect√©e")
    return None
def usb_presente():
    import glob
    # Cherche toutes les partitions de type /dev/sdXN (N = chiffre)
    devices = glob.glob('/dev/sd[a-z][0-9]')
    return len(devices) > 0

def detect_and_check_usb():
    """
    V√©rifie si la cl√© USB est d√©j√† mont√©e au point sp√©cifi√©.
    Retourne le chemin si la cl√© est mont√©e et non vide, sinon None.
    NOTE : Cette fonction suppose que le montage est g√©r√© par le syst√®me
    (via fstab ou udev) et que le script est ex√©cut√© avec sudo.
    """
    try:
        # V√©rifie si le r√©pertoire est un point de montage et n'est pas vide
        if os.path.ismount(MOUNT_DIR) and os.path.isdir(MOUNT_DIR) and os.listdir(MOUNT_DIR):
            print(f"‚úÖ Cl√© USB d√©tect√©e et mont√©e sur {MOUNT_DIR}")
            return MOUNT_DIR
        else:
            print(f"‚ùå Cl√© USB non d√©tect√©e, non mont√©e ou r√©pertoire {MOUNT_DIR} vide.")
            return None
    except Exception as e:
        print(f"Erreur lors de la v√©rification de la cl√© USB : {e}")
        return None

def mount_usb_manuellement():
    """
    Tente de d√©monter et remonter manuellement le premier p√©riph√©rique USB d√©tect√©
    pour s'affranchir d'autofs.
    """
    print("Tentative de montage manuel de la cl√© USB...")

    # 1. Tenter de d√©sactiver ou d√©monter les points de montage autofs
    try:
        if is_mounted("/mnt/usb_cle"):
            print("‚ö†Ô∏è D√©montage du point de montage autofs pour le remplacer par un montage direct.")
            subprocess.run(["sudo", "umount", "-l", "/mnt/usb_cle"], check=True)  # -l pour un d√©montage "paresseux"
    except subprocess.CalledProcessError as e:
        print(f"√âchec du d√©montage autofs (peut-√™tre d√©j√† inactif) : {e.stderr.decode()}")
    except Exception as e:
        log_error(f"Erreur inattendue lors du d√©montage : {e}")

    # 2. Chercher le p√©riph√©rique USB et le monter manuellement
    devices = glob.glob("/dev/sd[a-z]1")
    if not devices:
        print("‚õî Aucun p√©riph√©rique USB trouv√© (ex: /dev/sda1).")
        return False

    device_to_mount = devices[0]
    print(f"üîç P√©riph√©rique d√©tect√© pour montage : {device_to_mount}")

    try:
        os.makedirs("/mnt/usb_cle", exist_ok=True)
        subprocess.run(["sudo", "mount", device_to_mount, "/mnt/usb_cle"], check=True)
        print(f"‚úÖ Cl√© USB mont√©e avec succ√®s sur /mnt/usb_cle depuis {device_to_mount}")
        return True
    except subprocess.CalledProcessError as e:
        log_error(f"‚ùå Erreur lors du montage manuel de {device_to_mount} : {e.stderr.decode()}")
        print(f"‚ùå Erreur lors du montage manuel : {e.stderr.decode()}")
        return False
    except Exception as e:
        log_error(f"‚ùå Erreur inattendue lors du montage manuel : {e}")
        print(f"‚ùå Erreur inattendue lors du montage manuel : {e}")
        return False
# def detect_and_mount_usb():
#     try:
#         # Liste les p√©riph√©riques montables
#         result = subprocess.check_output("lsblk -o NAME,MOUNTPOINT,TYPE | grep 'part'", shell=True)
#         lines = result.decode().strip().split('\n')
#
#         for line in lines:
#             parts = line.split()
#             if len(parts) >= 2 and parts[2] == 'part':
#                 device = parts[0]
#                 mount_point = parts[1] if len(parts) > 1 else ""
#
#                 if mount_point == "":
#                     # Cr√©e un dossier de montage si non existant
#                     mount_point = f"/media/{device}"
#                     os.makedirs(mount_point, exist_ok=True)
#                     subprocess.run(["sudo", "mount", f"/dev/{device}", mount_point])
#                     print(f"‚úÖ Cl√© USB mont√©e sur {mount_point}")
#                     return mount_point
#                 else:
#                     print(f"‚úÖ Cl√© USB d√©j√† mont√©e sur {mount_point}")
#                     return mount_point
#
#         print("‚ùå Aucune cl√© USB d√©tect√©e.")
#         return None
#
#     except Exception as e:
#         print(f"‚ö†Ô∏è Erreur de d√©tection USB : {e}")
#         return None
def detect_and_mount_usb():
    """
    D√©tecte et monte la cl√© USB sur /mnt/usb_cle.
    Supporte les cas avec ou sans table de partitions.
    """
    mount_dir = "/mnt/usb_cle"
    print("etape 1")
    try:
        print("etape 2")
        output = subprocess.check_output(
            "lsblk -o NAME,TYPE,TRAN,FSTYPE,MOUNTPOINT -nr",
            shell=True
        ).decode()
    except subprocess.CalledProcessError as e:
        print(f"Erreur lors de l'ex√©cution de lsblk : {e}")
        return None

    for line in output.splitlines():
        parts = line.split()
        if len(parts) >= 3 and parts[1] in ("disk", "part") and parts[2] == "usb":
            name = parts[0]
            fstype = parts[3] if len(parts) > 3 else ""
            mount_point = parts[4] if len(parts) > 4 else ""

            # On ignore les disques d√©j√† mont√©s
            if mount_point:
                print(f"Cl√© USB d√©j√† mont√©e sur {mount_point}")
                return mount_point

            # Si c‚Äôest un "disk" USB, on regarde s‚Äôil a une partition
            if parts[1] == "disk" and os.path.exists(f"/dev/{name}1"):
                device_path = f"/dev/{name}1"
            else:
                device_path = f"/dev/{name}"

            os.makedirs(mount_dir, exist_ok=True)

            try:
                subprocess.check_call(f"mount {device_path} {mount_dir}", shell=True)
                print(f"Cl√© USB mont√©e sur {mount_dir}")
                return mount_dir
            except subprocess.CalledProcessError as e:
                print(f"Erreur lors du montage de {device_path} : {e}")
                return None

    print("Aucune cl√© USB d√©tect√©e.")
    return None

def detect_and_check_usb():
    """
    V√©rifie si la cl√© USB est d√©j√† mont√©e au point sp√©cifi√©.
    Retourne le chemin si la cl√© est mont√©e et non vide, sinon None.
    NOTE : Cette fonction suppose que le montage est g√©r√© par le syst√®me
    (via fstab ou udev) et que le script est ex√©cut√© avec sudo.
    """
    try:
        # V√©rifie si le r√©pertoire est un point de montage et n'est pas vide
        if os.path.ismount(MOUNT_DIR) and os.path.isdir(MOUNT_DIR) and os.listdir(MOUNT_DIR):
            print(f"‚úÖ Cl√© USB d√©tect√©e et mont√©e sur {MOUNT_DIR}")
            return MOUNT_DIR
        else:
            print(f"‚ùå Cl√© USB non d√©tect√©e, non mont√©e ou r√©pertoire {MOUNT_DIR} vide.")
            return None
    except Exception as e:
        print(f"Erreur lors de la v√©rification de la cl√© USB : {e}")
        return None

def mount_usb_manuellement():
    """
    Tente de d√©monter et remonter manuellement le premier p√©riph√©rique USB d√©tect√©
    pour s'affranchir d'autofs.
    """
    print("Tentative de montage manuel de la cl√© USB...")

    # 1. Tenter de d√©sactiver ou d√©monter les points de montage autofs
    try:
        if is_mounted("/mnt/usb_cle"):
            print("‚ö†Ô∏è D√©montage du point de montage autofs pour le remplacer par un montage direct.")
            subprocess.run(["sudo", "umount", "-l", "/mnt/usb_cle"], check=True)  # -l pour un d√©montage "paresseux"
    except subprocess.CalledProcessError as e:
        print(f"√âchec du d√©montage autofs (peut-√™tre d√©j√† inactif) : {e.stderr.decode()}")
    except Exception as e:
        log_error(f"Erreur inattendue lors du d√©montage : {e}")

    # 2. Chercher le p√©riph√©rique USB et le monter manuellement
    devices = glob.glob("/dev/sd[a-z]1")
    if not devices:
        print("‚õî Aucun p√©riph√©rique USB trouv√© (ex: /dev/sda1).")
        return False

    device_to_mount = devices[0]
    print(f"üîç P√©riph√©rique d√©tect√© pour montage : {device_to_mount}")

    try:
        os.makedirs("/mnt/usb_cle", exist_ok=True)
        subprocess.run(["sudo", "mount", device_to_mount, "/mnt/usb_cle"], check=True)
        print(f"‚úÖ Cl√© USB mont√©e avec succ√®s sur /mnt/usb_cle depuis {device_to_mount}")
        return True
    except subprocess.CalledProcessError as e:
        log_error(f"‚ùå Erreur lors du montage manuel de {device_to_mount} : {e.stderr.decode()}")
        print(f"‚ùå Erreur lors du montage manuel : {e.stderr.decode()}")
        return False
    except Exception as e:
        log_error(f"‚ùå Erreur inattendue lors du montage manuel : {e}")
        print(f"‚ùå Erreur inattendue lors du montage manuel : {e}")
        return False


def is_mounted(path="/mnt/usb_cle"):
    try:
        return subprocess.run(["mountpoint", "-q", path], check=False).returncode == 0
    except Exception:
        return False